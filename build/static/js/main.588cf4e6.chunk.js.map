{"version":3,"sources":["App.js","index.js"],"names":["App","emojiYouKnow","emojiArray","Object","keys","useState","meaning","setmeaning","className","id","onChange","e","emoji","target","value","trim","currentMeaning","undefined","style","maxWidth","margin","map","item","onClick","marginLeft","fontSize","cursor","rootElement","document","getElementById","createRoot","render"],"mappings":"mKAGe,SAASA,IACtB,IAAIC,EAAe,CACjB,eAAM,gBACN,eAAM,2BACN,eAAM,mBACN,eAAM,iCACN,eAAM,gBACN,eAAM,0BACN,eAAM,2BACN,eAAM,gCACN,eAAM,iBACN,eAAM,gBACN,eAAM,cACN,eAAM,YACN,eAAM,2BACN,eAAM,OACN,eAAM,QACN,SAAK,YAEHC,EAAaC,OAAOC,KAAKH,GACzB,EAAwBI,mBAAS,IAArC,mBAAKC,EAAL,KAAcC,EAAd,KAgBA,OACE,sBAAKC,UAAU,MAAf,UACE,6DAEE,sBAAMC,GAAG,WAAT,wCAEF,uBAAOC,SApBX,SAA2BC,GACzB,IAAIC,EAAQD,EAAEE,OAAOC,MACrBF,EAAQA,EAAMG,KAAK,KACnB,IAAIC,EAAiBf,EAAaW,QACXK,IAAnBD,IACFA,EAAiB,sCAEnBT,EAAWS,EACZ,IAaG,mBAAGP,GAAG,UAAN,SAAiBH,IACjB,qBACEY,MAAO,CACLC,SAAU,MACVC,OAAQ,QAHZ,SAMGlB,EAAWmB,KAAI,SAACC,GACf,OACE,sBAEEC,QAAS,WArBnBhB,EAAWN,EAqBqCqB,GAA7B,EACTJ,MAAO,CACLM,WAAY,SACZC,SAAU,OACVC,OAAQ,WANZ,SASGJ,GARIA,EAWV,QAIR,CClED,IAAMK,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAAC/B,EAAD,M","file":"static/js/main.588cf4e6.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { useState } from \"react\";\n\nexport default function App() {\n  var emojiYouKnow = {\n    \"ðŸ¥º\": \"Pleading Face\",\n    \"ðŸ¥°\": \"Smiling Face with Hearts\",\n    \"ðŸ™ƒ\": \"Upside-down face\",\n    \"ðŸ˜Š\": \"Smiling Face with Smiling Eyes\",\n    \"ðŸ˜€\": \"Grinning Face\",\n    \"ðŸ˜†\": \"Grinning Squinting Face\",\n    \"ðŸ˜œ\": \"Winking Face with Tongue\",\n    \"ðŸ¤—\": \" Smiling Face with Open Hands\",\n    \"ðŸ¤”\": \" Thinking Face\",\n    \"ðŸ¤«\": \"Shushing Face\",\n    \"ðŸ˜¯\": \"Hushed Face\",\n    \"ðŸ¤ª\": \"Zany Face\",\n    \"ðŸ˜…\": \"Grinning Face with Sweat\",\n    \"ðŸ”¥\": \"Fire\",\n    \"ðŸ’€\": \"Skull\",\n    \"âœ¨\": \"Sparkles\"\n  };\n  var emojiArray = Object.keys(emojiYouKnow);\n  var [meaning, setmeaning] = useState(\"\");\n\n  function inputEventHandler(e) {\n    let emoji = e.target.value;\n    emoji = emoji.trim(\" \"); //remove extra space added in emoji\n    var currentMeaning = emojiYouKnow[emoji];\n    if (currentMeaning === undefined) {\n      currentMeaning = \"we do not have thi in our database\";\n    }\n    setmeaning(currentMeaning);\n  }\n\n  function emojoClickEventHandler(emoji) {\n    setmeaning(emojiYouKnow[emoji]);\n  }\n\n  return (\n    <div className=\"App\">\n      <h3>\n        Choose Your Favourite emoji\n        <span id=\"spantext\">and know its meaning...</span>\n      </h3>\n      <input onChange={inputEventHandler}></input>\n      <p id=\"meaning\">{meaning}</p>\n      <div\n        style={{\n          maxWidth: \"50%\",\n          margin: \"auto\"\n        }}\n      >\n        {emojiArray.map((item) => {\n          return (\n            <span\n              key={item}\n              onClick={() => emojoClickEventHandler(item)}\n              style={{\n                marginLeft: \"0.7rem\",\n                fontSize: \"2rem\",\n                cursor: \"pointer\"\n              }}\n            >\n              {item}\n            </span>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}